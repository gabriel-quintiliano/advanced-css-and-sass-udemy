/* in thw "7-1 architecture" this main.scss file only serves to import other files 
@import "folder/file"; --> will import `folder/_file.scss` */
/* this file as the name suggests will be the base the styles will be build on top of. In here
 * you will set global resets, styles and normalizations */
/* basic "global" reset - affects all html elements including before and after pseudo-elements */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  /* every element will inherit its box-sizing from its parent, which in this case will be the value
   * `box-sizing: border-box` set in <body>. Doing it this way (via inheritance) is considered a slightly
   * better approach than just setting it via the universal selector (I just dunno why) */
  box-sizing: inherit; }

html {
  font-size: 62.5%;
  /* 62.5% * 16px (which is generally browser font-size) = 10 px, thus 1rem = 10px */
  /* rem is not supported bellow IE 9 */ }

body {
  /* everything related to "global" fonts should be done in the body tag selector, because
   * this way every element within <body> will inherit these style and its also more efficient
   * that doing the same via the `*` selector, which selects each element "individually", here
   * we're using the power of inheritance */
  box-sizing: border-box;
  /* margins and paddings are NOT added to the total size of the element */ }

/* in this file you should put all animations that'll be used in the project */
/* regarding browser performance, it's better to only ever animate the `opacity` and `transform` properties
 * because these only trigger the `composite` phase of rendering the element on screen, the other phases,
 * `style`, `layout` (of elements) and `paint` are skipped.
 *
 * of course you can animate other properties, but remember that browser animations are only optimized for
 * `opacity` and `transform`. This video `https://www.youtube.com/watch?v=N5EW4HnF6FU` demonstrates this in
 * practice.
 *
 * for example when you deal with an element's width or margin you're also messing with the positioning of
 * the elements next to it and because of that, animations with those become less performant and look bad. */
@keyframes moveInLeft {
  0% {
    opacity: 0;
    /* translateX repositions the element on the x axis relative to its initial position */
    transform: translateX(-10rem);
    /* the animation starts with the elem. 10rem (100px) to the left */ }
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translateX(0);
    /* so the elem. is in its final position in the end of the animation */ } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
    /* the animation starts with the elem. 10rem (100px) to the right */ }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translateX(0);
    /* so the elem. is in its final position in the end of the animation */ } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem);
    /* the animation starts with the elem. 100px to the right */ }
  100% {
    opacity: 1;
    transform: translateY(0);
    /* so the elem. is in its final position in the end of the animation */ } }

/* in this file you should put styles related to the general typography of the website */
body {
  font-family: "Lato", sans-serif;
  /* Use "Lato" font-family if available, otherwise use "sans-serif" */
  font-weight: 400;
  font-size: 1.6rem;
  line-height: 1.7;
  /* now line-height will be 1.7x bigger than the pre-defined line-height*/
  color: #777;
  /* sets text color */
  padding: 3rem;
  /* this padding will not be inherited by elements within <body> */ }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /* maybe this is needed if animations (of child elements of this) flick, this prop somehow fixes it */
  backface-visibility: hidden;
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1.3s;
    animation-timing-function: ease-out;
    /*
    animation-delay: 3s; - delay for the animation to start
    animation-iteration-count: 3; - how many times should the animation be repeated
    */ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 1.3s ease-out;
    /* this is the shortcut for everything described bellow */
    /* animation-name: moveInRight;
    animation-duration: 1.3s;
    animation-timing-function: ease-out; */ }

.heading-secondary {
  display: inline-block;
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  /* by default the `background`(shortcut), `background-color` and `background-images` properties fill
   * the whole border-box, but via the `background-clip` property you can change this behavior to:
   * `padding-box`, `content-box` or `text`, so that the background you fill only this specific area. */
  background-clip: text;
  color: transparent;
  letter-spacing: 2px;
  transition: all .2s; }
  .heading-secondary:hover {
    transform: skewY(2deg) skewX(15deg) scale(1.1);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2); }

.heading-tertiary {
  font-weight: 700;
  text-transform: uppercase; }

.paragraph:not(:last-child) {
  margin-bottom: 3rem; }

/* in this file you'll have utility classes which are generic classes that have a single
 * or simple style declaration that can be reused throughout the project */
.u-center-text {
  text-align: center; }

.u-margin-bottom-small {
  margin-bottom: 1rem; }

.u-margin-bottom-medium {
  margin-bottom: 4rem; }

.u-margin-bottom-big {
  margin-bottom: 8rem; }

.u-padding-left-small {
  padding-left: 1rem; }

.u-pos-relative {
  position: relative; }

.u-pos-absolute {
  position: absolute; }

.btn {
  /* :link pseudo-class represents an anchor that has a destination set i.e. href */
  /* :active pseudo-class represents an anchor tag that is being clicked (left button of mouse pressed) */
  /* ::after is a pseudo-element, which are virtual elements that are inserted as child-elements from the
   * real html element, these will only appear on screen if they have `display` or `content` set, and you
   * also need to define its `height` and `width` (remember, as these are within the real html element,
   * the 100% value refers to the whole size of this element)
   *  */ }
  .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    /* gets rid of that default underline in anchor tags text content */
    padding: 1.5rem 4rem;
    /* by setting `display: inline-block` the inner-display prop = `inline` and because of that you can treat
     * this element as text (so it can be easily centered if its parent element has `text-align: center` set).
     * the `inline-block` value is necessary so there is a box model for us to deal with margins and paddings... */
    display: inline-block;
    border-radius: .7rem;
    /* the `transition` property is a short-hand that will deal with the changing of style of an element,
     * so in the end it can be seen as another way to approach animations.
     * `transition` must always be set alongside the initial state styles.
     *
     * 1. define which css properties this transition will be applied to (if you don't know, use `all`)
     * 2. define the time this style transition will take (from initial state - define above - to final state
     *    which is in this case defined in `.btn:hover` and `.btn:active`) */
    transition: all .2s;
    position: relative; }
  .btn:hover, .btn:focus {
    transform: translateY(-3px);
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
    /* value = x-axis y-axis blur color */
    /* ::after pseudo-element when hovered */ }
    .btn:hover::after, .btn:focus::after {
      transform: scaleX(1.4) scaleY(1.6);
      /* scales this pseudo-element to twice its size */
      opacity: 0; }
  .btn:active {
    transform: translateY(-1px);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2);
    /* value = x-axis y-axis blur color */ }
  .btn--white {
    background-color: #fff;
    color: #777; }
  .btn::after {
    content: "";
    /* it just need to have `content` set, it can even be empty */
    display: inline-block;
    height: 100%;
    /* refers to 100% of the `.btn` element */
    width: 100%;
    /* refers to 100% of the `.btn` element */
    border-radius: 7px;
    /* used px because I don't want it to change based on browser font-size */
    position: absolute;
    /* this prop + `top: 0;` and `left: 0;` positions this pseudo-elem right over `.btn` */
    top: 0;
    left: 0;
    transition: all .4s;
    z-index: -1;
    /* so it hinds behind `.btn` */ }
  .btn--white::after {
    background-color: #fff; }
  .btn--animated {
    /* animation: <animation-name> <animation-duration> <animation-timing-function> <animation-delay> */
    animation: moveInBottom 0.65s ease-out .75s;
    /* `backwards` value already applies styles define in the first `@keyframes` animation rules (0% in this
     * case), during `animation-delay` (.75s in this case). */
    animation-fill-mode: backwards; }

.btn-text:link, .btn-text:visited {
  color: #55c57a;
  display: inline-block;
  text-decoration: none;
  border-bottom: 1px solid #55c57a;
  padding: 3px;
  border-radius: 5px;
  transition: all .3s ease-out; }

.btn-text:hover, .btn-text:focus {
  background-color: #55c57a;
  color: #fff;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(-2px); }

.btn-text:active {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  transform: translateY(0px); }

.composition {
  position: relative;
  /* when .component is being hovered (i.e. when any element within .component container is being hovered),
   * selects all descendants from .component which are NOT being hovered at that moment.
   * final selector --> .component:hover .component__photo:not(:hover) */ }
  .composition__photo {
    width: 60%;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
    border-radius: 5px;
    position: absolute;
    transition: all .2s;
    outline-offset: .8rem; }
    .composition__photo--p1 {
      top: -2rem;
      left: 0;
      transform: rotateZ(-6deg); }
    .composition__photo--p2 {
      top: 2rem;
      right: 0;
      transform: rotateZ(3deg); }
    .composition__photo--p3 {
      top: 10rem;
      left: 20%; }
    .composition__photo:hover {
      outline: 0.8rem solid #55c57a;
      transform: scale(1.1);
      box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.4);
      z-index: 1; }
  .composition:hover .composition__photo:not(:hover) {
    opacity: 0.7;
    scale: .9; }

.header {
  /* the calc is to make it fits the viewport with 30px of padding above and bellow (added in <body>) */
  height: calc(98vh - (60px - 2vh));
  /* 98% of the viewport height (60px is for 2 * <body> padding (30px)) */
  /* always apply a gradient on the background via the `background-image` css prop, and if its the case
   * define the actual bg image afterwards, this way the gradient will be on top of the image - make sure
   * to correctly adjust the gradient opacity */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url("../img/hero.jpg");
  background-size: cover;
  /* directly on replaced elements, e.g. <img>, <video>, you can use `object-fit` */
  background-position: top;
  /* tells which part of the bg should be "fixed" and will never go out of the frame */
  /* clip-path apply a "mask" in the object, you define the coordinate based on what you want to be shown on
   * screen - the `polygon` function receives coordinates to create as polygon shaped mask.
   * Fortunately, coordinates can be dynamic and passed as percentages */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /* position: relative; is like `static` but respects reference values from `top`, `left`, `bottom` and `right`,
   * and also can be used as "anchor" to child elements which have `position: absolute` */
  position: relative; }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    /* relative to it's closest positioned parent, `.header` in this case */
    left: 4rem;
    /* relative to it's closest positioned parent, `.header` in this case */ }
  .header__logo {
    height: 3.5rem;
    /* by just setting `height` and omitting the `width`, this prop will be automatically figured out */ }
  .header__text-box {
    /* When you want to symmetrically center an element, just use flexbox prop on parents and child elements, but when
     * it's not gonna be 100% symmetrical, that's how you do it: */
    position: absolute;
    /* now it's positioned relative to it's closest positioned parent */
    top: 40%;
    /* relative to `.header` */
    left: 50%;
    /* relative to `.header` */
    /* as the element is positioned based on its top left corner, the prop bellow "makes it" be positioned based on
     * the element's center. Relative to the element's own position, it repositions it 50% (of its length) to the left
     * and 50% (of its height) to the top */
    transform: translate(-50%, -50%);
    text-align: center;
    /* this will make sure `.btn` element is centered */ }

/* Even though floats are not used anymore, it may be interesting to still know how these
 * work in case you have to update an old website that uses it to newer technologies */
.row {
  display: flow-root;
  max-width: 114rem;
  margin: 0 auto;
  /* [class^="col-"] selects all elements whose class attribute value starts with "col-"
   * actually is the `^` symbol that does this trick.
   * `^` --> starts with the declared value
   * `*` --> contains the declared value
   * `$` --> ends with the declared value */ }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row [class^="col-"] {
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    /* to use a sass variable within a native css function you MUST wrap that in # + { <var-here> } */
    width: calc((100% - 6rem)/2); }
  .row .col-1-of-3 {
    width: calc(calc(calc(100% - (3 - 1) * 6rem) / 3 * 1) + 0rem); }
  .row .col-2-of-3 {
    width: calc(calc(calc(100% - (3 - 1) * 6rem) / 3 * 2) + 6rem); }
  .row .col-1-of-4 {
    width: calc(calc(calc(100% - (4 - 1) * 6rem) / 4 * 1) + 0rem); }
  .row .col-2-of-4 {
    width: calc(calc(calc(100% - (4 - 1) * 6rem) / 4 * 2) + 6rem); }
  .row .col-3-of-4 {
    width: calc(calc(calc(100% - (4 - 1) * 6rem) / 4 * 3) + 12rem); }

/* in scss files within the pages folder (like this file), we can put style that could
 * be in the components folder but actually are going to appear only in this specific page */
.section-about {
  background-color: #f7f7f7;
  /* 8rem is the padding we want and +$margin-negative-indentation is to "cancel out" the
   * negative margin-top property set just bellow. In the end we're just doing that so the
   * background color of this element "flows" behind the element above this one.
   * (I looks like a hack to me, maybe there is a better way to do that...) */
  padding: calc(8rem + 20vh) 0;
  /* when you use negative values for margin instead of "expanding" outwards and pushing elements
   * around, it "expands" inwards and this way its box model gets smaller, thus the element gets
   * closer to other elements */
  margin-top: -20vh; }
