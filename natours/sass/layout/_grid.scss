/* Even though floats are not used anymore, it may be interesting to still know how these
 * work in case you have to update an old website that uses it to newer technologies */

.row {
  display: flow-root; // so the .row is "aware" of floats and contains those
  max-width: $grid-width; // 1140px or if it doesn't fit, spread 100% of the available space
  margin: 0 auto;
  /* I don't want this padding to change according to root font-size because in case its a bigger
   * font-size this padding would also become bigger and thus squash letters even more. */
  padding: 0 16px;

  &:not(:last-child) { // every .row but the last one
    margin-bottom: $gutter-vertical;

    @include respond(tab-port) {
      margin-bottom: $gutter-vertical-tab-port;
    }
  }

  @include respond(tab-port) {
    max-width: 55rem;
  }

  /* [class^="col-"] selects all elements whose class attribute value starts with "col-"
   * actually is the `^` symbol that does this trick.
   * `^` --> starts with the declared value
   * `*` --> contains the declared value
   * `$` --> ends with the declared value */
  [class^="col-"] {
    float: left;

    &:not(:last-child) {
      margin-right: $gutter-horizontal;
      @include respond(tab-port) {
        // No horizontal gutter is needed in tab-port layouts as there will be a single column.
        margin-right: 0;
        // But as these behave as rows now, a vertical gutter must be added
        margin-bottom: $gutter-vertical-tab-port;
      }
    }
    
    @include respond(tab-port) {
      /* All columns will spread the whole width in tab-port layouts. !important is being used
       * just so that this style gets applied no matter the order or specificity. */
      width: 100% !important;
    }
  }

  .col-1-of-2 {
    /* no need to use # + { <var-here> } within `calc()` in dart-sass@1.72.0 */
    width: calcGridColWidth(1,2);
  }
  
  .col-1-of-3 {
    width: calcGridColWidth(1,3);
  }

  .col-2-of-3 {
    width: calcGridColWidth(2,3);
  }

  .col-1-of-4 {
    width: calcGridColWidth(1,4);
  }

  .col-2-of-4 {
    width: calcGridColWidth(2,4);
  }

  .col-3-of-4 {
    width: calcGridColWidth(3,4);
  }
}