.composition {
  --_photo-transition-duration: .2s;
  --_p1-left: -5rem;
  --_p3-top: 8rem;
  --_p3-translate: 0;

  @include respond(tab-port) {
    /* I used margin-bottom here to give .composition some height (29rem in this case). As
     * there are only absolutely positioned elements within, this container collapses, but
     * it turns out that in phone and tab-port 1 column layout, the absolutely positioned
     * elements will occupy no actual space in the normal flow and that's what margin-bottom
     * is solving now.
     *
     * Why margin-bottom instead of height? that is because of the hover effect applied in
     * `&:hover &__photo:not(:hover) {...}`, for it to work properly, the actual composition
     * element has to have no height, otherwise, when it being hovered the scale and opacity
     * styles will be applied to all the photos, which is weird when no specific photo is
     * being hovered. This selector mentioned above is just to select the photos not being
     * hovered when there is actually another photo already being hovered. */
    margin-bottom: 29rem; // applies to .composition container only
    transform: translateY(-65px); // applies to .composition container only

    --_p1-left: 10%;
    --_p3-top: 0;
    --_p3-translate: 0 6rem 0;
  }

  @include respond(phone) {
    --_photo-transition-duration: 270ms;
  }

  position: relative;
  perspective: 700px; // this perspective should NOT change according to browser font-size
  perspective-origin: 40% 0%;
  background-color: lightblue;
  

  &__photo {
    width: 80%;
    border-radius: 5px;
    position: absolute;
    transition: all var(--_photo-transition-duration);
    outline-offset: .8rem; // creates a space between the element and the actual outline
    
    &--p1 {
      left: var(--_p1-left);
      transform: rotateX(80deg) rotateZ(15deg) rotateY(-5deg) scale(.8);
      translate: 0px 0px -350px;
      box-shadow: 0 15px 40px rgba($color-black, .4);
    }
    
    &--p2 {
      top: 2rem;
      left: 5rem;
      transform: rotateX(80deg) rotateZ(360deg) rotateY(-5deg) scale(0.9);
      translate: 10rem 0px -200px;
      box-shadow: 0 8px 30px rgba($color-black, .4);
    }
    
    &--p3 {
      top: var(--_p3-top);
      left: 10%;
      transform: rotateX(76deg) rotateZ(20deg) rotateY(352deg);
      translate: var(--_p3-translate);
      box-shadow: 5px 15px 15px rgba($color-black, .5);
    }

    // composition__photo:hover
    &:hover {
      outline: .8rem solid $color-primary;
      transform: scale(1.05);
      translate: 0px 0px 0px;
      z-index: 1;
    }
  }

  /* when .component is being hovered (i.e. when any element within .component container is being hovered),
   * selects all descendants from .component which are NOT being hovered at that moment.
   * final selector --> .component:hover .component__photo:not(:hover) */
  &:hover &__photo:not(:hover) {
    opacity: 0.7;
    scale: .9;
  }
}