.form {
  
  &__group:not(:last-child) {
    margin-bottom: 2rem;
  }

  &__input {
    font-size: 1.5rem;
    /* <input> elements DON'T INHERIT the font properties, so it need to define it or
     * set it to inherit it's parent font-family value (this will also be used by the
     * form's placeholder text) */
    font-family: inherit;
    color: inherit;
    
    /* in form inputs horizontal padding tends to look smaller, so make it a bit
     * bigger to compensate for that and make it look better*/
    padding: 1.5rem 2rem;
    border-radius: 3px;
    background-color: rgba($color-white, .5);
    border-style: none; // to remove the default <input> borders
    width: 100%;
    display: block;

    /* this transparent border is here just so that when we add a greenish border
     * as the user focuses on this <input> the elements below aren't moved around,
     * and that is because the border is already here but not showing yet. */
    border-bottom: 3px solid transparent;
    transition: border-bottom .2s;

    // when the <input> is focused by tab or the user is typing within
    &:focus {
      outline: none; // by default it has some kind of outline
      box-shadow: 0 16px 20px rgba($color-black, .1);
      border-bottom: 3px solid $color-primary;
    }
    
    &:focus:invalid {
      border-bottom: 3px solid $color-secondary-dark;
    }

    /* via the ::placeholder pseudo-element you can add rule sets specific to an
     * <input> placeholder, e.g. a different font color, a lighter one maybe. */
    &::placeholder {
      color: $color-grey-dark-2;
    }
  }

  &__label {
    font-size: 1.4rem;
    font-weight: 700;
    margin-left: 2rem;
    margin-top: .7rem;
    display: inline-block;
    opacity: 1;
    
    transition-property: transform opacity;
    transition-duration: .2s;
  }
  
  /* while <input> placeholder is being shown, the associated <label> will be invisible
   * an translated upwards, so when it reappears (as the placeholder goes away), it will
   * be back to its original position in an animation as if the placeholder itself is
   * going down. */
  &__input:placeholder-shown + &__label {
    transform: translateY(-4.3rem);
    opacity: 0; // only makes element disappear
    visibility: hidden; // makes the element actually inexistent in the page (but doesn't change the layout)
  }

  &__radio-group {
    /* as we know there are only 2 radio buttons, `width: 49%;` + `display: inline-block;`
     * will make sure these are side by side in the layout. */
    width: 49%;
    display: inline-block;
  }

    &__radio-input {
      /* so the actual <input type="radio"> which cannot be styled is removed from the layout
       * and also don't show on screen. It doesn't affect is functionality, by clicking the
       * <label> linked to this input, it will still be selected. */
      display: none;
  }

  &__radio-label {
    cursor: pointer;
  }

  &__radio-button {
    $outline-offset: .3rem;
    $outline-width: .2rem;

    display: inline-block; // so height, width, border-radius and background-color can apply
    vertical-align: middle; // center it in the middle of line
    transform: translateY(-2px); // just a fix to better center it

    // this is the size of the middle "ball" in the "selected" state
    height: 1.1rem;
    width: 1.1rem;
    border-radius: 50%; // to make this elem. to look like a circle

    /* as there is no way (that I know of) to offset a border, I'll make the outer circle
     * of this radio button out of the outline property, which can be offset. As outline
     * doesn't take actual space in the page structure, i'm making up for that with a margin
     * that is the sum of the outline-width and outline-offset. */
    outline: $outline-width solid $color-secondary-dark;
    /* if you're really going to use `outline-offset` on your project, it may be worth to
     * look for more details on the behavior of Google Chrome of not accepting non-whole 
     * pixel values for this property (I think it rounded these broken numbers down). */
    outline-offset: $outline-offset;
    margin: calc($outline-offset + $outline-width);

    /* In the Udemy css course, the instructor achieves the same using the border property
     * to represent the outer circle and makes the inner circle out of the border of the
     * ::after pseudo-element which is centered using `position: absolute`. I just found
     * my approach easier and simpler. In this case, the background-color will be animated
     * which is far from ideal, but it's an area so small that there show be unnoticeable
     * performance wise. */

    transition: background-color .2s;
  }

  &__radio-input:checked + &__radio-label &__radio-button {
    background-color: $color-secondary-dark;
  }
}