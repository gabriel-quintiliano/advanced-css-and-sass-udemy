:root {
  --color-primary: #eb2f64;
  --color-primary-light: #FF3366;
  --color-primary-dark: #BA265D;
  --color-grey-light-1: #faf9f9;
  --color-grey-light-2: #f4f2f2;
  --color-grey-light-3: #f0eeee;
  --color-grey-light-4: #ccc;
  --color-grey-dark-1: #333;
  --color-grey-dark-2: #777;
  --color-grey-dark-3: #999;
  --shadow-dark: 0 20px 60px rgba(0,0,0,.3);
}

html {
  box-sizing: border-box;
}

*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}

body {
  min-height: 100vh;
  background-image: linear-gradient(to right bottom, var(--color-primary-light), var(--color-primary-dark));
  background-repeat: no-repeat;
}

:root {
  /* if you want `rem` units throughout the styles of your site/app to be relative
   * to a custom value defined by you, it's mandatory that you set a `font-size` in
   * :root or html, if you do that in any other place (even in body), it won't work
   * as intended, and `rem` will keep being relative to the browser's default font-size
   * which is typically 16px. Bellow I'm setting it to be 10px (62.5% * 16px = 10px) */
  font-size: 62.5%;
}

body {
  font-family: "Open Sans";
  font-weight: 400;
  line-height: 1.6;
  color: var(--color-grey-dark-2);
  font-size: 1.6rem;
}

.hotel-view {
  background-color: #fff;
  flex: 1;
  height: 70rem;
}

.container {
  max-width: 120rem;
  min-height: 50rem;
  margin: 8rem auto;
  background-color: var(--color-grey-light-2);
  box-shadow: var(--shadow-dark);
}

.header {
  height: 7rem;
  background-color: #fff;
  border-bottom: var(--color-grey-light-2);
  display: flex;
  justify-content: space-between;
  align-items: center;
}
.header__logo {
  margin-left: 2rem;
  height: 3.25rem;
}

.sidebar {
  background-color: var(--color-grey-dark-1);
  /* Remember: flex = flex-grow flex-shrink flex-basis - and in this case it's totally
   * ok for flex-shrink to be 0 because as flex basis is a percentage, it will automatically
   * shrink based on it's parent width */
  flex: 0 0 18%;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

.content {
  display: flex;
  background-color: blue;
}

.search {
  font-size: 1.4rem;
  flex: 0 0 40%;
  /* I personally thought it'd better to style &__input based on the focus within
   * &__form-group because this way, when &__button is clicked or focused via keyboard
   * and thus &__input loses focus, it doesn't lose its styles defined bellow */
}
.search__form-group {
  position: relative;
  margin: auto;
  display: flex;
  align-items: center;
  width: 90%;
  transition: width 200ms;
}
.search__form-group:focus-within {
  width: 100%;
}
.search__form-group:focus-within .search__input {
  outline: none;
  background-color: var(--color-grey-light-3);
}
.search__input {
  font-family: inherit;
  font-size: inherit;
  color: inherit;
  background-color: var(--color-grey-light-2);
  border: none;
  /* I don't know why `border-radius: 50%` doesn't work on <input>, but to have
   * this same effect as expected, just use a high number in pixels. */
  border-radius: 200px;
  padding: 0.7rem 2rem;
  flex: 1;
  transition: box-shadow 300ms;
}
.search__input::placeholder, .search__input::-webkit-input-placeholder {
  font-weight: 100;
  color: var(--color-grey-dark-1);
}
.search__button {
  position: absolute;
  right: 13px;
  border: none;
  background-color: transparent;
  transition: transform 100ms;
}
.search__button:active {
  transform: translateY(2px);
}
.search__icon {
  height: 2rem;
  width: 2rem;
  fill: var(--color-grey-dark-3);
}

.user-nav {
  align-self: stretch;
  display: flex;
}
.user-nav > * {
  height: 100%;
  cursor: pointer;
  padding: 0 2rem;
  display: flex;
  align-items: center;
}
.user-nav > *:hover {
  background-color: var(--color-grey-light-2);
}
.user-nav__icon-box {
  position: relative;
}
.user-nav__icon {
  height: 2.25rem;
  width: 2.25rem;
  fill: var(--color-grey-dark-2);
}
.user-nav__notification {
  font-size: 1rem;
  min-height: 1.75rem;
  min-width: 1.75rem;
  border-radius: 100px;
  background-color: var(--color-primary);
  color: #fff;
  text-align: center;
  /* this padding makes sure that if there are more than 2 digits in the notification 
   * count, the number won't bump into the sides */
  padding: 0 0.5em;
  position: absolute;
  top: 20%;
  left: 55%;
}
.user-nav__user-photo {
  height: 3.25rem;
  border-radius: 50%;
  margin-right: 1rem;
}

.side-nav {
  font-size: 1.4rem;
  list-style: none;
  margin-top: 3.5rem;
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}
.side-nav__item {
  position: relative;
  /* Even though &__item is a <li>, we can still use the :active pseudo-class to apply styles to
   * it when it's being clicked (or pressed). */
}
.side-nav__item::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 5px;
  background-color: var(--color-primary);
  transition: transform 200ms, width 400ms cubic-bezier(1, 0, 0, 1) 200ms, background-color 100ms;
  transform: scaleY(0);
}
.side-nav__item:active::before {
  background-color: var(--color-primary-light);
}
.side-nav__item:hover::before, .side-nav__item--active::before {
  transform: scaleY(1);
  width: 100%;
}
.side-nav__link {
  color: var(--color-grey-light-1);
  text-decoration: none;
  text-transform: uppercase;
  display: inline-block;
  padding: 1.5rem 3rem;
  margin: 0 auto;
  position: relative;
  z-index: 1;
  display: flex;
  align-items: center;
}
.side-nav__icon {
  height: 1.75rem;
  width: 1.75rem;
  margin-right: 2rem;
  /* currentColor is a built-in value that represent the current value of the `color`
   * property of the current element, or, if the current element has no `color` set,
   * currentColor represents the `color` set in the parent element - which is just what
   * is happening bellow, it getting the current `color` of the &__link element. Using
   * this `currentColor` value you, for example, can only care about changing the color
   * of the parent element and doesn't need to bother setting the same color for the
   * child element according to that specific state of its parent. */
  fill: currentColor;
}

.legal {
  font-size: 1.2rem;
  text-align: center;
  color: var(--color-grey-light-4);
  padding: 2.5rem;
}

.gallery {
  display: flex;
}
.gallery__photo {
  vertical-align: middle;
  width: 100%;
  /* Not really necessary but it will make sure there is no distortion if the height
   * of the container holding the image doesn't "align" with it width x height ratio */
  height: 100%;
  object-fit: cover;
  object-position: center;
}

/*# sourceMappingURL=style.css.map */
