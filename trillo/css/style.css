@charset "UTF-8";
/* $breakpoint argument choices:
 * - medium
 * - large
 * - largest
 *
 * ORDER: Base + typography > general layout > grid > page-layout > components
 *
 * 1 em = 16px by default */
:root {
  --color-primary: #eb2f64;
  --color-primary-light: #FF3366;
  --color-primary-dark: #BA265D;
  --color-grey-light-1: #faf9f9;
  --color-grey-light-2: #f4f2f2;
  --color-grey-light-3: #f0eeee;
  --color-grey-light-4: #ccc;
  --color-grey-dark-1: #333;
  --color-grey-dark-2: #777;
  --color-grey-dark-3: #999;
  --shadow-dark: 0 20px 60px rgba(0,0,0,.3);
  --shadow-light: 0 20px 50px rgba(0,0,0,.06);
  --grey-light-line: 1px solid var(--color-grey-light-2);
}

html {
  box-sizing: border-box;
}

*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}

body {
  min-height: 100vh;
  background-image: linear-gradient(to right bottom, var(--color-primary-light), var(--color-primary-dark));
  background-repeat: no-repeat;
}

@keyframes pulsate {
  0% {
    transform: scale(1);
    box-shadow: 0;
  }
  50% {
    transform: scale(1.05);
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.25);
  }
  100% {
    transform: scale(1);
    box-shadow: 0;
  }
}
:root {
  /* if you want `rem` units throughout the styles of your site/app to be relative
   * to a custom value defined by you, it's mandatory that you set a `font-size` in
   * :root or html, if you do that in any other place (even in body), it won't work
   * as intended, and `rem` will keep being relative to the browser's default font-size
   * which is typically 16px. Bellow I'm setting it to be 10px (62.5% * 16px = 10px) */
  font-size: 62.5%;
}
@media only screen and (max-width: 68.75em) {
  :root {
    font-size: 56.25%;
  }
}

body {
  font-family: "Open Sans";
  font-weight: 400;
  line-height: 1.6;
  color: var(--color-grey-dark-2);
  font-size: 1.6rem;
}

.hotel-view {
  background-color: #fff;
  flex: 1;
}

.container {
  max-width: 120rem;
  min-height: 50rem;
  margin: 8rem auto;
  background-color: var(--color-grey-light-2);
  box-shadow: var(--shadow-dark);
  border-radius: 5px;
  overflow: hidden;
}
@media only screen and (max-width: 75em) {
  .container {
    margin: 0;
    max-width: 100%;
    border-radius: 0;
  }
}

.header {
  height: 7rem;
  background-color: #fff;
  border-bottom: 1px solid var(--color-grey-light-2);
  display: flex;
  justify-content: space-between;
  align-items: center;
}
.header__logo {
  margin-left: 2rem;
  height: 3.25rem;
}

.sidebar {
  background-color: var(--color-grey-dark-1);
  /* Remember: flex = flex-grow flex-shrink flex-basis - and in this case it's totally
   * ok for flex-shrink to be 0 because as flex basis is a percentage, it will automatically
   * shrink based on it's parent width */
  flex: 0 0 18%;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}
@media only screen and (max-width: 56.25em) {
  .sidebar {
    flex-direction: row;
    align-items: center;
  }
}

.content {
  display: flex;
}
@media only screen and (max-width: 56.25em) {
  .content {
    flex-direction: column;
  }
}

.search {
  font-size: 1.4rem;
  flex: 0 0 40%;
  /* I personally thought it'd better to style &__input based on the focus within
   * &__form-group because this way, when &__button is clicked or focused via keyboard
   * and thus &__input loses focus, it doesn't lose its styles defined bellow */
}
.search__form-group {
  position: relative;
  margin: auto;
  display: flex;
  align-items: center;
  width: 90%;
  transition: width 200ms;
}
.search__form-group:focus-within {
  width: 100%;
}
.search__form-group:focus-within .search__input {
  outline: none;
  background-color: var(--color-grey-light-3);
}
.search__input {
  font-family: inherit;
  font-size: inherit;
  color: inherit;
  background-color: var(--color-grey-light-2);
  border: none;
  /* I don't know why `border-radius: 50%` doesn't work on <input>, but to have
   * this same effect as expected, just use a high number in pixels. */
  border-radius: 200px;
  padding: 0.7rem 2rem;
  flex: 1;
  transition: box-shadow 300ms;
}
.search__input::placeholder, .search__input::-webkit-input-placeholder {
  font-weight: 100;
  color: var(--color-grey-dark-1);
}
.search__button {
  position: absolute;
  right: 13px;
  border: none;
  background-color: transparent;
  transition: transform 100ms;
}
.search__button:active {
  transform: translateY(2px);
}
.search__icon {
  height: 2rem;
  width: 2rem;
  fill: var(--color-grey-dark-3);
}

.user-nav {
  align-self: stretch;
  display: flex;
}
.user-nav > * {
  height: 100%;
  cursor: pointer;
  padding: 0 2rem;
  display: flex;
  align-items: center;
}
.user-nav > *:hover {
  background-color: var(--color-grey-light-2);
}
.user-nav__icon-box {
  position: relative;
}
.user-nav__icon {
  height: 2.25rem;
  width: 2.25rem;
  fill: var(--color-grey-dark-2);
}
.user-nav__notification {
  font-size: 1rem;
  min-height: 1.75rem;
  min-width: 1.75rem;
  border-radius: 100px;
  background-color: var(--color-primary);
  color: #fff;
  text-align: center;
  /* this padding makes sure that if there are more than 2 digits in the notification 
   * count, the number won't bump into the sides */
  padding: 0 0.5em;
  position: absolute;
  top: 20%;
  left: 55%;
}
.user-nav__user-photo {
  height: 3.25rem;
  border-radius: 50%;
  margin-right: 1rem;
}

.side-nav {
  --_flex-grow: initial;
  --_flex-dir: column;
  --_m-top: 3.5rem;
  --_gap: .5rem;
  --_link-padding: 1.5rem 3rem;
  --_link-justify-content: initial;
  --_m-right-icon: 2rem;
  flex-grow: var(--_flex-grow);
  font-size: 1.4rem;
  list-style: none;
  margin-top: var(--_m-top);
  display: flex;
  flex-direction: var(--_flex-dir);
  gap: var(--_gap);
}
@media only screen and (max-width: 56.25em) {
  .side-nav {
    --_flex-grow: 1;
    --_flex-dir: row;
    --_m-top: 0;
    --_gap: 0;
    --_link-padding: 1.5rem;
    --_link-justify-content: center;
    --_m-right-icon: 1.2rem;
  }
}
.side-nav__item {
  position: relative;
  flex: 1;
  /* Even though &__item is a <li>, we can still use the :active pseudo-class to apply styles to
   * it when it's being clicked (or pressed). */
}
.side-nav__item::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 5px;
  background-color: var(--color-primary);
  transition: transform 200ms, width 400ms cubic-bezier(1, 0, 0, 1) 200ms, background-color 100ms;
  transform: scaleY(0);
}
.side-nav__item:active::before {
  background-color: var(--color-primary-light);
}
.side-nav__item:hover::before, .side-nav__item--active::before {
  transform: scaleY(1);
  width: 100%;
}
.side-nav__link {
  color: var(--color-grey-light-1);
  text-decoration: none;
  text-transform: uppercase;
  display: inline-block;
  padding: var(--_link-padding);
  margin: 0 auto;
  position: relative;
  z-index: 1;
  display: flex;
  align-items: center;
  justify-content: var(--_link-justify-content);
}
.side-nav__icon {
  height: 1.75rem;
  width: 1.75rem;
  margin-right: var(--_m-right-icon);
  /* currentColor is a built-in value that represent the current value of the `color`
   * property of the current element, or, if the current element has no `color` set,
   * currentColor represents the `color` set in the parent element - which is just what
   * is happening bellow, it getting the current `color` of the &__link element. Using
   * this `currentColor` value you, for example, can only care about changing the color
   * of the parent element and doesn't need to bother setting the same color for the
   * child element according to that specific state of its parent. */
  fill: currentColor;
}

.legal {
  font-size: 1.2rem;
  text-align: center;
  color: var(--color-grey-light-4);
  padding: 2.5rem;
}
@media only screen and (max-width: 56.25em) {
  .legal {
    display: none;
  }
}

.gallery {
  display: flex;
}
.gallery__photo {
  vertical-align: middle;
  width: 100%;
  /* Not really necessary but it will make sure there is no distortion if the height
   * of the container holding the image doesn't "align" with it width x height ratio */
  height: 100%;
  object-fit: cover;
  object-position: center;
}

.overview {
  display: flex;
  align-items: center;
  border-bottom: 1px solid var(--color-grey-light-2);
}
.overview__heading {
  font-size: 2.25rem;
  font-weight: 300;
  text-transform: uppercase;
  letter-spacing: 1px;
  padding: 1.5rem 3rem;
}
.overview__stars {
  /* Within flexbox, a great trick to create a space between items other then `flex: 1` (which
   * actually stretches the item), is to use `margin: auto`, this way the element keep its
   * original size but a spacing is created. */
  margin-right: auto;
  display: flex;
  align-items: center;
}
.overview__icon-star, .overview__icon-location {
  width: 1.75rem;
  height: 1.75rem;
  fill: var(--color-primary);
}
.overview__location {
  font-size: 1.4rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}
.overview__rating {
  color: #fff;
  background-color: var(--color-primary);
  align-self: stretch;
  padding: 0 2.25rem;
  margin-left: 3rem;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}
.overview__rating-average {
  font-size: 2.25rem;
  font-weight: 300;
  line-height: 2.25rem;
}
.overview__rating-count {
  font-size: 1.2rem;
  font-weight: 300;
}

.btn {
  font-size: 1.5rem;
  font-weight: 300;
  text-transform: uppercase;
  border-radius: 150px;
  border: none;
  background-image: linear-gradient(to right, var(--color-primary-light), var(--color-primary-dark));
  color: #fff;
  position: relative;
  overflow: hidden;
  cursor: pointer;
}
.btn__visible {
  display: inline-block;
  padding: 2rem 7.5rem;
  transition: transform 200ms;
}
.btn__invisible {
  width: 100%;
  padding: 2rem 0;
  transition: transform 200ms;
  position: absolute;
  top: -100%;
  left: 0;
}
.btn:hover .btn__visible, .btn:hover .btn__invisible {
  transform: translateY(100%);
}
.btn:focus {
  animation: pulsate 1s infinite;
}

.btn-inline {
  font-size: inherit;
  font-weight: 400;
  color: var(--color-primary);
  transition: color 200ms;
  display: inline-block;
  border: none;
  border-bottom: 1px solid currentColor;
  padding-bottom: 0.2rem;
  background-color: transparent;
  cursor: pointer;
}
.btn-inline span {
  margin-left: 3px;
  transition: margin 200ms;
}
.btn-inline:hover {
  color: var(--color-grey-dark-1);
}
.btn-inline:hover span {
  margin-left: 10px;
}
.btn-inline:focus {
  animation: pulsate 1s infinite;
}

.description {
  font-size: 1.4rem;
  background-color: #fff;
  box-shadow: var(--shadow-light);
  padding: 3rem;
  flex: 0 0 60%;
}

.detail {
  font-size: 1.4rem;
  display: flex;
  gap: 4.5rem;
  padding: 4.5rem;
  background-color: var(--color-grey-light-1);
  border-bottom: var(--grey-light-line);
}

.user-reviews {
  flex: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.paragraph:not(:last-of-type) {
  margin-bottom: 2rem;
}

.list {
  list-style: none;
  padding: 3rem 0;
  margin: 3rem 0;
  border-top: var(--grey-light-line);
  border-bottom: var(--grey-light-line);
  display: flex;
  align-items: center;
  flex-wrap: wrap;
  gap: 0.7rem 1rem;
}
.list__item {
  flex: 1 0 40%;
}
.list__item::before {
  content: "";
  width: 1rem;
  height: 1rem;
  display: inline-block;
  vertical-align: middle;
  margin-right: 0.4rem;
  /* To use SVGs directly in css, it can be as simple as defining an background-image
   * which is actually the url() of the SVG, the only downside of this approach is that
   * this way you cannot really change the (fill)color of the SVG - Use that for really
   * old browsers support */
  /* On newer browsers, use a mask, which defines an area that we can look through, this
   * way, now we can set the SVG area as the mask to let a background-color pass through.
   * It's similar to clipping. */
  background-color: var(--color-primary);
  mask-image: url("../img/chevron-thin-right.svg");
  mask-size: cover;
}
.list__icon {
  height: 1.75rem;
  width: 1.75rem;
}

.recommend {
  font-size: 1.3rem;
  color: var(--color-grey-dark-3);
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  gap: 0.5rem 1rem;
}
.recommend__count {
  flex: 1 0 max-content;
}
.recommend__friends {
  flex: 0 0 max-content;
}
.recommend__photo {
  box-sizing: content-box;
  vertical-align: middle;
  border: 3px solid #fff;
  height: 4rem;
  border-radius: 50%;
  /* This only works because the photo is a square, for aspect-ratios other than
   * 1:1, it would be a lot better to wrap this <img> tag in a container square
   * container and use the following styles here in &__photo to avoid distortions:
   *
   * width: 100%;
   * height: 100%;
   * object-fit: cover; */
}
.recommend__photo:not(:first-of-type) {
  margin-left: -1.5rem;
}

.review {
  background-color: #fff;
  padding: 3rem;
  margin-bottom: 3.5rem;
  box-shadow: var(--shadow-light);
  overflow: hidden;
  position: relative;
}
.review__text {
  margin-bottom: 2rem;
  position: relative;
  z-index: 2;
}
.review__user {
  display: flex;
  align-items: center;
  gap: 1.5rem;
}
.review__photo {
  vertical-align: middle;
  height: 4.5rem;
  border-radius: 50%;
}
.review__user-box {
  flex: 1;
}
.review__user-name {
  font-size: 1.3rem;
  font-weight: 600;
  text-transform: uppercase;
}
.review__user-date {
  font-size: 1.1rem;
}
.review__rating {
  color: var(--color-primary);
  font-size: 2.4rem;
  font-weight: 300;
}
.review::before {
  font-family: sans-serif;
  content: "“";
  font-size: 20rem;
  line-height: 1;
  color: var(--color-grey-light-2);
  position: absolute;
  top: -2.75rem;
  left: -1rem;
  z-index: 1;
}

.cta {
  padding: 3.5rem 0;
  text-align: center;
}
.cta__book-now {
  font-size: 2rem;
  font-weight: 300;
  text-transform: uppercase;
  margin-bottom: 2.5rem;
}

/*# sourceMappingURL=style.css.map */
