@charset "UTF-8";
/* $breakpoint argument choices:
 * - small
 * - medium
 * - large
 * - largest
 *
 * ORDER: Base + typography > general layout > grid > page-layout > components
 *
 * 1 em = 16px by default */
:root {
  --color-primary: #eb2f64;
  --color-primary-light: #FF3366;
  --color-primary-dark: #BA265D;
  --color-grey-light-1: #faf9f9;
  --color-grey-light-2: #f4f2f2;
  --color-grey-light-3: #f0eeee;
  --color-grey-light-4: #ccc;
  --color-grey-dark-1: #333;
  --color-grey-dark-2: #777;
  --color-grey-dark-3: #999;
  --shadow-dark: 0 20px 60px rgba(0,0,0,.3);
  --shadow-light: 0 20px 50px rgba(0,0,0,.06);
  --grey-light-line: 1px solid var(--color-grey-light-2);
}

html {
  box-sizing: border-box;
}

*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}

body {
  min-height: 100vh;
  background-image: linear-gradient(to right bottom, var(--color-primary-light), var(--color-primary-dark));
  background-repeat: no-repeat;
}

@keyframes pulsate {
  0% {
    transform: scale(1);
    box-shadow: 0;
  }
  50% {
    transform: scale(1.05);
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.25);
  }
  100% {
    transform: scale(1);
    box-shadow: 0;
  }
}
:root {
  /* if you want `rem` units throughout the styles of your site/app to be relative
   * to a custom value defined by you, it's mandatory that you set a `font-size` in
   * :root or html, if you do that in any other place (even in body), it won't work
   * as intended, and `rem` will keep being relative to the browser's default font-size
   * which is typically 16px. Bellow I'm setting it to be 10px (62.5% * 16px = 10px) */
  font-size: 62.5%;
}
@media only screen and (max-width: 68.75em) {
  :root {
    font-size: 56.25%;
  }
}

body {
  font-family: "Open Sans";
  font-weight: 400;
  line-height: 1.6;
  color: var(--color-grey-dark-2);
  font-size: 1.6rem;
}

.hotel-view {
  background-color: #fff;
  flex: 1;
}

.container {
  max-width: 120rem;
  min-height: 50rem;
  margin: 8rem auto;
  background-color: var(--color-grey-light-2);
  box-shadow: var(--shadow-dark);
  border-radius: 5px;
  overflow: hidden;
}
@media only screen and (max-width: 75em) {
  .container {
    margin: 0;
    max-width: 100%;
    border-radius: 0;
  }
}

.header {
  background-color: #fff;
  border-bottom: 1px solid var(--color-grey-light-2);
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
}
.header__logo {
  margin-left: 2rem;
  height: 3.25rem;
}

.sidebar {
  background-color: var(--color-grey-dark-1);
  /* Remember: flex = flex-grow flex-shrink flex-basis - and in this case it's totally
   * ok for flex-shrink to be 0 because as flex basis is a percentage, it will automatically
   * shrink based on it's parent width */
  flex: 0 0 18%;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}
@media only screen and (max-width: 56.25em) {
  .sidebar {
    flex-direction: row;
    align-items: center;
  }
}

.content {
  display: flex;
}
@media only screen and (max-width: 56.25em) {
  .content {
    flex-direction: column;
  }
}

.search {
  --_search-flex: 0 0 40%;
  --_fg-width: 90%;
  font-size: 1.4rem;
  flex: var(--_search-flex);
  /* I personally thought it'd better to style &__input based on the focus within
   * &__form-group because this way, when &__button is clicked or focused via keyboard
   * and thus &__input loses focus, it doesn't lose its styles defined bellow */
}
@media only screen and (max-width: 31.875em) {
  .search {
    --_fg-width: 100%;
    --_search-flex: 1 0 100%;
    order: 1;
    padding: 0 1.7rem;
    margin-bottom: 1rem;
  }
}
.search__form-group {
  position: relative;
  margin: auto;
  display: flex;
  align-items: center;
  width: var(--_fg-width);
  transition: width 200ms;
}
.search__form-group:focus-within {
  width: 100%;
}
.search__form-group:focus-within .search__input {
  outline: none;
  background-color: var(--color-grey-light-3);
}
.search__input {
  font-family: inherit;
  font-size: inherit;
  color: inherit;
  background-color: var(--color-grey-light-2);
  border: none;
  /* I don't know why `border-radius: 50%` doesn't work on <input>, but to have
   * this same effect as expected, just use a high number in pixels. */
  border-radius: 200px;
  padding: 0.7rem 2rem;
  flex: 1;
  transition: box-shadow 300ms;
}
.search__input::placeholder, .search__input::-webkit-input-placeholder {
  font-weight: 100;
  color: var(--color-grey-dark-1);
}
.search__button {
  position: absolute;
  right: 13px;
  border: none;
  background-color: transparent;
  transition: transform 100ms;
}
.search__button:active {
  transform: translateY(2px);
}
.search__icon {
  height: 2rem;
  width: 2rem;
  fill: var(--color-grey-dark-3);
}

.user-nav {
  --_children-padding: 2rem;
  --_notification-top: 20%;
  --_icon-box-m-top: 0;
  align-self: stretch;
  display: flex;
}
@media only screen and (max-width: 31.875em) {
  .user-nav {
    --_children-padding: 1.25rem 2rem;
    --_notification-top: 12%;
    --_icon-box-m-top: .2rem;
    justify-content: space-between;
    flex: 0 0 55%;
  }
}
.user-nav > * {
  height: 100%;
  cursor: pointer;
  padding: var(--_children-padding);
  display: flex;
  align-items: center;
}
.user-nav > *:hover {
  background-color: var(--color-grey-light-2);
}
.user-nav__icon-box {
  position: relative;
  margin-top: var(--_icon-box-m-top);
}
.user-nav__icon {
  height: 2.25rem;
  width: 2.25rem;
  fill: var(--color-grey-dark-2);
}
.user-nav__notification {
  font-size: 1rem;
  min-height: 1.75rem;
  min-width: 1.75rem;
  border-radius: 100px;
  background-color: var(--color-primary);
  color: #fff;
  text-align: center;
  /* this padding makes sure that if there are more than 2 digits in the notification 
   * count, the number won't bump into the sides */
  padding: 0 0.5em;
  position: absolute;
  top: var(--_notification-top);
  left: 55%;
}
.user-nav__user-photo {
  height: 3.25rem;
  border-radius: 50%;
  margin-right: 1rem;
}

.side-nav {
  --_flex-grow: initial;
  --_flex-dir: column;
  --_m-top: 3.5rem;
  --_gap: .5rem;
  --_link-padding: 1.5rem 3rem;
  --_link-justify-content: initial;
  --_link-flex-gap: 2rem;
  --_link-flex-dir: initial;
  --_link-span-line-height: inherit;
  flex-grow: var(--_flex-grow);
  font-size: 1.4rem;
  list-style: none;
  margin-top: var(--_m-top);
  display: flex;
  flex-direction: var(--_flex-dir);
  gap: var(--_gap);
}
@media only screen and (max-width: 56.25em) {
  .side-nav {
    --_flex-grow: 1;
    --_flex-dir: row;
    --_m-top: 0;
    --_gap: 0;
    --_link-padding: 1.5rem 0;
    --_link-justify-content: center;
    --_link-flex-gap: 1.2rem;
  }
}
@media only screen and (max-width: 31.875em) {
  .side-nav {
    --_link-padding: 1rem 0;
    --_link-flex-gap: .8rem;
    --_link-flex-dir: column;
    --_link-span-line-height: 1;
  }
}
.side-nav__item {
  position: relative;
  flex: 1;
  /* Even though &__item is a <li>, we can still use the :active pseudo-class to apply styles to
   * it when it's being clicked (or pressed). */
}
.side-nav__item::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 5px;
  background-color: var(--color-primary);
  transition: transform 200ms, width 400ms cubic-bezier(1, 0, 0, 1) 200ms, background-color 100ms;
  transform: scaleY(0);
}
.side-nav__item:active::before {
  background-color: var(--color-primary-light);
}
.side-nav__item:hover::before, .side-nav__item--active::before {
  transform: scaleY(1);
  width: 100%;
}
.side-nav__link {
  color: var(--color-grey-light-1);
  text-decoration: none;
  text-transform: uppercase;
  display: inline-block;
  padding: var(--_link-padding);
  margin: 0 auto;
  position: relative;
  z-index: 1;
  display: flex;
  flex-direction: var(--_link-flex-dir);
  align-items: center;
  justify-content: var(--_link-justify-content);
  gap: var(--_link-flex-gap);
}
.side-nav__link span {
  line-height: var(--_link-span-line-height);
}
.side-nav__icon {
  height: 1.75rem;
  width: 1.75rem;
  /* currentColor is a built-in value that represent the current value of the `color`
   * property of the current element, or, if the current element has no `color` set,
   * currentColor represents the `color` set in the parent element - which is just what
   * is happening bellow, it getting the current `color` of the &__link element. Using
   * this `currentColor` value you, for example, can only care about changing the color
   * of the parent element and doesn't need to bother setting the same color for the
   * child element according to that specific state of its parent. */
  fill: currentColor;
}

.legal {
  font-size: 1.2rem;
  text-align: center;
  color: var(--color-grey-light-4);
  padding: 2.5rem;
}
@media only screen and (max-width: 56.25em) {
  .legal {
    display: none;
  }
}

.gallery {
  display: flex;
}
.gallery__photo {
  vertical-align: middle;
  width: 100%;
  /* Not really necessary but it will make sure there is no distortion if the height
   * of the container holding the image doesn't "align" with it width x height ratio */
  height: 100%;
  -o-object-fit: cover;
     object-fit: cover;
  -o-object-position: center;
     object-position: center;
}

.overview {
  --_primary-text-font-size: 2.25rem;
  --_heading-padding: 1.5rem 3rem;
  --_heading-m-bottom: 0rem;
  --_rating-count-font-size: 1.2rem;
  --_rating-padding: 0 2.25rem;
  --_rating-m-left: 3rem;
  --_icon-location-display: initial;
  --_location-position: initial;
  --_location-bottom: 0
  --_location-left: 0;
  display: flex;
  align-items: center;
  border-bottom: 1px solid var(--color-grey-light-2);
  position: relative;
}
@media only screen and (max-width: 37.5em) {
  .overview {
    --_primary-text-font-size: 1.8rem;
    --_heading-padding: 1.25rem 2rem;
    --_rating-count-font-size: 1rem;
    --_rating-padding: 0 1.5rem;
    --_rating-m-left: 1rem;
  }
}
@media only screen and (max-width: 31.875em) {
  .overview {
    --_heading-padding: 1rem 2rem;
    --_heading-m-bottom: 1.8rem;
    --_location-position: absolute;
    --_location-bottom: 1rem;
    --_location-left: 2rem;
    --_icon-location-display: none;
    --_rating-m-left: 0;
  }
}
.overview__heading {
  font-size: var(--_primary-text-font-size);
  font-weight: 300;
  text-transform: uppercase;
  letter-spacing: 1px;
  padding: var(--_heading-padding);
  margin-bottom: var(--_heading-m-bottom);
}
.overview__stars {
  /* Within flexbox, a great trick to create a space between items other then `flex: 1` (which
   * actually stretches the item), is to use `margin: auto`, this way the element keep its
   * original size but a spacing is created. */
  margin-right: auto;
  display: flex;
  align-items: center;
}
.overview__icon-star, .overview__icon-location {
  width: 1.75rem;
  height: 1.75rem;
  fill: var(--color-primary);
}
.overview__icon-location {
  display: var(--_icon-location-display);
}
.overview__location {
  position: var(--_location-position);
  bottom: var(--_location-bottom);
  left: var(--_location-left);
  font-size: 1.4rem;
  display: flex;
  align-items: center;
}
.overview__rating {
  color: #fff;
  background-color: var(--color-primary);
  align-self: stretch;
  padding: var(--_rating-padding);
  margin-left: var(--_rating-m-left);
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}
.overview__rating-average {
  font-size: var(--_primary-text-font-size);
  font-weight: 300;
  line-height: 2.25rem;
}
.overview__rating-count {
  font-size: var(--_rating-count-font-size);
  font-weight: 300;
  text-transform: uppercase;
}

.btn {
  font-size: 1.5rem;
  font-weight: 300;
  text-transform: uppercase;
  border-radius: 150px;
  border: none;
  background-image: linear-gradient(to right, var(--color-primary-light), var(--color-primary-dark));
  color: #fff;
  position: relative;
  overflow: hidden;
  cursor: pointer;
}
.btn__visible {
  display: inline-block;
  padding: 2rem 7.5rem;
  transition: transform 200ms;
}
.btn__invisible {
  width: 100%;
  padding: 2rem 0;
  transition: transform 200ms;
  position: absolute;
  top: -100%;
  left: 0;
}
.btn:hover .btn__visible, .btn:hover .btn__invisible {
  transform: translateY(100%);
}
.btn:focus {
  animation: pulsate 1s infinite;
}

.btn-inline {
  font-size: inherit;
  font-weight: 400;
  color: var(--color-primary);
  transition: color 200ms;
  display: inline-block;
  border: none;
  border-bottom: 1px solid currentColor;
  padding-bottom: 0.2rem;
  background-color: transparent;
  cursor: pointer;
}
.btn-inline span {
  margin-left: 3px;
  transition: margin 200ms;
}
.btn-inline:hover {
  color: var(--color-grey-dark-1);
}
.btn-inline:hover span {
  margin-left: 10px;
}
.btn-inline:focus {
  animation: pulsate 1s infinite;
}

.description {
  font-size: 1.4rem;
  background-color: #fff;
  box-shadow: var(--shadow-light);
  padding: 3rem;
  flex: 0 0 60%;
}
@media only screen and (max-width: 56.25em) {
  .description {
    padding: 2rem;
  }
}

.detail {
  --_padding: 4.5rem;
  font-size: 1.4rem;
  display: flex;
  gap: var(--_padding);
  padding: var(--_padding);
  background-color: var(--color-grey-light-1);
  border-bottom: var(--grey-light-line);
}
@media only screen and (max-width: 56.25em) {
  .detail {
    --_padding: 3rem;
  }
}
@media only screen and (max-width: 37.5em) {
  .detail {
    flex-direction: column;
  }
}
@media only screen and (max-width: 56.25em) {
  .detail {
    --_padding: 1.5rem;
  }
}

.user-reviews {
  flex: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.paragraph:not(:last-of-type) {
  margin-bottom: 2rem;
}

.list {
  list-style: none;
  padding: 3rem 0;
  margin: 3rem 0;
  border-top: var(--grey-light-line);
  border-bottom: var(--grey-light-line);
  display: flex;
  align-items: center;
  flex-wrap: wrap;
  gap: 0.7rem 1rem;
}
.list__item {
  flex: 1 0 40%;
}
@media only screen and (max-width: 31.875em) {
  .list__item {
    flex: 0 0 100%;
  }
}
.list__item::before {
  content: "";
  width: 1rem;
  height: 1rem;
  display: inline-block;
  vertical-align: middle;
  margin-right: 0.4rem;
  /* To use SVGs directly in css, it can be as simple as defining an background-image
   * which is actually the url() of the SVG, the only downside of this approach is that
   * this way you cannot really change the (fill)color of the SVG - Use that for really
   * old browsers support */
  background-image: url("../img/chevron-thin-right.svg");
  background-size: cover;
}
@supports ((-webkit-mask-image: url("../img/chevron-thin-right.svg")) or (mask-image: url("../img/chevron-thin-right.svg"))) and ((-webkit-mask-size: cover) or (mask-size: cover)) {
  .list__item::before {
    /* On newer browsers, use a mask, which defines an area that we can look through, this
    * way, now we can set the SVG area as the mask to let a background-color pass through.
     * It's similar to clipping. */
    background-color: var(--color-primary);
    -webkit-mask-image: url("../img/chevron-thin-right.svg");
            mask-image: url("../img/chevron-thin-right.svg");
    -webkit-mask-size: cover;
            mask-size: cover;
    background-image: none;
  }
}
.list__icon {
  height: 1.75rem;
  width: 1.75rem;
}

.recommend {
  font-size: 1.3rem;
  color: var(--color-grey-dark-3);
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  gap: 0.5rem 1rem;
}
.recommend__count {
  flex: 1 0 max-content;
}
.recommend__friends {
  flex: 0 0 max-content;
}
.recommend__photo {
  box-sizing: content-box;
  vertical-align: middle;
  border: 3px solid #fff;
  height: 4rem;
  border-radius: 50%;
  /* This only works because the photo is a square, for aspect-ratios other than
   * 1:1, it would be a lot better to wrap this <img> tag in a container square
   * container and use the following styles here in &__photo to avoid distortions:
   *
   * width: 100%;
   * height: 100%;
   * object-fit: cover; */
}
.recommend__photo:not(:first-of-type) {
  margin-left: -1.5rem;
}

.review {
  background-color: #fff;
  padding: 3rem;
  margin-bottom: 3.5rem;
  box-shadow: var(--shadow-light);
  overflow: hidden;
  position: relative;
}
@media only screen and (max-width: 56.25em) {
  .review {
    padding: 2rem;
    margin-bottom: 3rem;
  }
}
.review__text {
  margin-bottom: 2rem;
  position: relative;
  z-index: 2;
}
.review__user {
  display: flex;
  align-items: center;
  gap: 1.5rem;
}
.review__photo {
  vertical-align: middle;
  height: 4.5rem;
  border-radius: 50%;
}
.review__user-box {
  flex: 1;
}
.review__user-name {
  font-size: 1.3rem;
  font-weight: 600;
  text-transform: uppercase;
}
.review__user-date {
  font-size: 1.1rem;
}
.review__rating {
  color: var(--color-primary);
  font-size: 2.4rem;
  font-weight: 300;
}
.review::before {
  font-family: sans-serif;
  content: "“";
  font-size: 20rem;
  line-height: 1;
  color: var(--color-grey-light-2);
  position: absolute;
  top: -2.75rem;
  left: -1rem;
  z-index: 1;
}

.cta {
  padding: 3.5rem 0;
  text-align: center;
}
@media only screen and (max-width: 56.25em) {
  .cta {
    padding: 2.5rem 1rem;
  }
}
.cta__book-now {
  font-size: 2rem;
  font-weight: 300;
  text-transform: uppercase;
  margin-bottom: 2.5rem;
}

/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlLmNvbXAuY3NzIiwiLi4vc2Fzcy9hYnN0cmFjdC9fbWl4aW5zLnNjc3MiLCIuLi9zYXNzL2Fic3RyYWN0L192YXJpYWJsZXMuc2NzcyIsIi4uL3Nhc3MvYmFzZS9fYmFzZS5zY3NzIiwiLi4vc2Fzcy9iYXNlL19hbmltYXRpb25zLnNjc3MiLCIuLi9zYXNzL2Jhc2UvX3R5cG9ncmFwaHkuc2NzcyIsIi4uL3Nhc3MvcGFnZXMvX2hvbWUuc2NzcyIsIi4uL3Nhc3MvbGF5b3V0L19jb250YWluZXIuc2NzcyIsIi4uL3Nhc3MvbGF5b3V0L19oZWFkZXIuc2NzcyIsIi4uL3Nhc3MvbGF5b3V0L19zaWRlYmFyLnNjc3MiLCIuLi9zYXNzL2xheW91dC9fY29udGVudC5zY3NzIiwiLi4vc2Fzcy9jb21wb25lbnRzL19zZWFyY2guc2NzcyIsIi4uL3Nhc3MvY29tcG9uZW50cy9fdXNlci1uYXYuc2NzcyIsIi4uL3Nhc3MvY29tcG9uZW50cy9fc2lkZS1uYXYuc2NzcyIsIi4uL3Nhc3MvY29tcG9uZW50cy9fbGVnYWwtdGV4dC5zY3NzIiwiLi4vc2Fzcy9jb21wb25lbnRzL19nYWxsZXJ5LnNjc3MiLCIuLi9zYXNzL2NvbXBvbmVudHMvX292ZXJ2aWV3LnNjc3MiLCIuLi9zYXNzL2NvbXBvbmVudHMvX2J0bi5zY3NzIiwiLi4vc2Fzcy9jb21wb25lbnRzL19idG4taW5saW5lLnNjc3MiLCIuLi9zYXNzL2NvbXBvbmVudHMvX2Rlc2NyaXB0aW9uLnNjc3MiLCIuLi9zYXNzL2NvbXBvbmVudHMvX2RldGFpbC5zY3NzIiwiLi4vc2Fzcy9jb21wb25lbnRzL191c2VyLXJldmlld3Muc2NzcyIsIi4uL3Nhc3MvY29tcG9uZW50cy9fcGFyYWdyYXBoLnNjc3MiLCIuLi9zYXNzL2NvbXBvbmVudHMvX2xpc3Quc2NzcyIsIi4uL3Nhc3MvY29tcG9uZW50cy9fcmVjb21tZW5kLnNjc3MiLCIuLi9zYXNzL2NvbXBvbmVudHMvX3Jldmlldy5zY3NzIiwiLi4vc2Fzcy9jb21w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 */